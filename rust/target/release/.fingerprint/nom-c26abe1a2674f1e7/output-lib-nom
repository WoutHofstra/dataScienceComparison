{"$message_type":"future_incompat","future_incompat_report":[{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":17352,"byte_end":17353,"line_start":514,"line_end":514,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":11070,"byte_end":11103,"line_start":369,"line_end":369,"column_start":3,"column_end":36,"is_primary":false,"text":[{"text":"  map!(i, be_u8, | x | { x as i8 })","highlight_start":3,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":16352,"byte_end":17477,"line_start":495,"line_end":519,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":90},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, $submac2!(o, $($args2)*))","highlight_start":1,"highlight_end":115},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":1,"highlight_end":65},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":1,"highlight_end":43},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m514\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:369:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m369\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u8, | x | { x as i8 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":17352,"byte_end":17353,"line_start":514,"line_end":514,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":11216,"byte_end":11251,"line_start":375,"line_end":375,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, be_u16, | x | { x as i16 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":16352,"byte_end":17477,"line_start":495,"line_end":519,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":90},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, $submac2!(o, $($args2)*))","highlight_start":1,"highlight_end":115},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":1,"highlight_end":65},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":1,"highlight_end":43},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m514\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:375:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m375\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u16, | x | { x as i16 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":17352,"byte_end":17353,"line_start":514,"line_end":514,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":11364,"byte_end":11399,"line_start":381,"line_end":381,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, be_u32, | x | { x as i32 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":16352,"byte_end":17477,"line_start":495,"line_end":519,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":90},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, $submac2!(o, $($args2)*))","highlight_start":1,"highlight_end":115},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":1,"highlight_end":65},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":1,"highlight_end":43},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m514\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:381:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u32, | x | { x as i32 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":17352,"byte_end":17353,"line_start":514,"line_end":514,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":11512,"byte_end":11547,"line_start":387,"line_end":387,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, be_u64, | x | { x as i64 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":16352,"byte_end":17477,"line_start":495,"line_end":519,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":90},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, $submac2!(o, $($args2)*))","highlight_start":1,"highlight_end":115},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":1,"highlight_end":65},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":1,"highlight_end":43},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m514\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:387:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m387\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, be_u64, | x | { x as i64 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":17352,"byte_end":17353,"line_start":514,"line_end":514,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":12851,"byte_end":12884,"line_start":437,"line_end":437,"column_start":3,"column_end":36,"is_primary":false,"text":[{"text":"  map!(i, le_u8, | x | { x as i8 })","highlight_start":3,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":16352,"byte_end":17477,"line_start":495,"line_end":519,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":90},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, $submac2!(o, $($args2)*))","highlight_start":1,"highlight_end":115},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":1,"highlight_end":65},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":1,"highlight_end":43},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m514\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:437:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u8, | x | { x as i8 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":17352,"byte_end":17353,"line_start":514,"line_end":514,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":13000,"byte_end":13035,"line_start":443,"line_end":443,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, le_u16, | x | { x as i16 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":16352,"byte_end":17477,"line_start":495,"line_end":519,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":90},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, $submac2!(o, $($args2)*))","highlight_start":1,"highlight_end":115},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":1,"highlight_end":65},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":1,"highlight_end":43},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m514\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:443:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m443\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u16, | x | { x as i16 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":17352,"byte_end":17353,"line_start":514,"line_end":514,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":13151,"byte_end":13186,"line_start":449,"line_end":449,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, le_u32, | x | { x as i32 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":16352,"byte_end":17477,"line_start":495,"line_end":519,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":90},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, $submac2!(o, $($args2)*))","highlight_start":1,"highlight_end":115},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":1,"highlight_end":65},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":1,"highlight_end":43},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m514\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:449:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m449\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u32, | x | { x as i32 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":17352,"byte_end":17353,"line_start":514,"line_end":514,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":13302,"byte_end":13337,"line_start":455,"line_end":455,"column_start":3,"column_end":38,"is_primary":false,"text":[{"text":"  map!(i, le_u64, | x | { x as i64 })","highlight_start":3,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":16352,"byte_end":17477,"line_start":495,"line_end":519,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! map(","highlight_start":1,"highlight_end":18},{"text":"  // Internal parser, do not use directly","highlight_start":1,"highlight_end":42},{"text":"  (__impl $i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":90},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => $crate::IResult::Done(i, $submac2!(o, $($args2)*))","highlight_start":1,"highlight_end":115},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    map!(__impl $i, $submac!($($args)*), $submac2!($($args2)*));","highlight_start":1,"highlight_end":65},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    map!(__impl $i, call!($f), call!($g));","highlight_start":1,"highlight_end":43},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    map!(__impl $i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":53},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `map`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:514:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m514\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    map!(__impl $i, call!($f), call!($g));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:455:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m455\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  map!(i, le_u64, | x | { x as i64 })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `map`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24595,"byte_end":24596,"line_start":694,"line_end":694,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4520,"byte_end":4544,"line_start":127,"line_end":127,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":17763,"byte_end":18175,"line_start":601,"line_end":618,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    delimited!($i, call!($f), $($rest)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m601\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m602\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m603\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m604\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m617\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26811,"byte_end":26812,"line_start":776,"line_end":776,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":19596,"byte_end":19619,"line_start":532,"line_end":532,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24187,"byte_end":24248,"line_start":683,"line_end":683,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24559,"byte_end":24595,"line_start":694,"line_end":694,"column_start":5,"column_end":41,"is_primary":false,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":5,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4520,"byte_end":4544,"line_start":127,"line_end":127,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":17763,"byte_end":18175,"line_start":601,"line_end":618,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26361,"byte_end":26820,"line_start":765,"line_end":778,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Error(_)      => $crate::IResult::Done($i, ::std::option::Option::None),","highlight_start":1,"highlight_end":98},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m776\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m601\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m602\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m603\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m604\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m617\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26811,"byte_end":26812,"line_start":776,"line_end":776,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16752,"byte_end":16775,"line_start":465,"line_end":465,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24187,"byte_end":24248,"line_start":683,"line_end":683,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":5890,"byte_end":5916,"line_start":174,"line_end":174,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4700,"byte_end":4726,"line_start":131,"line_end":131,"column_start":43,"column_end":69,"is_primary":false,"text":[{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":43,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":17763,"byte_end":18175,"line_start":601,"line_end":618,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26361,"byte_end":26820,"line_start":765,"line_end":778,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Error(_)      => $crate::IResult::Done($i, ::std::option::Option::None),","highlight_start":1,"highlight_end":98},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m776\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m601\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m602\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m603\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m604\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m617\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18686,"byte_end":18687,"line_start":508,"line_end":508,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24187,"byte_end":24248,"line_start":683,"line_end":683,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":5890,"byte_end":5916,"line_start":174,"line_end":174,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4700,"byte_end":4726,"line_start":131,"line_end":131,"column_start":43,"column_end":69,"is_primary":false,"text":[{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":43,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":17763,"byte_end":18175,"line_start":601,"line_end":618,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m601\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m602\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m603\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m604\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m617\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18686,"byte_end":18687,"line_start":508,"line_end":508,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":14363,"byte_end":14386,"line_start":436,"line_end":436,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26446,"byte_end":26469,"line_start":768,"line_end":768,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":19596,"byte_end":19619,"line_start":532,"line_end":532,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":17763,"byte_end":18175,"line_start":601,"line_end":618,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26361,"byte_end":26820,"line_start":765,"line_end":778,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Error(_)      => $crate::IResult::Done($i, ::std::option::Option::None),","highlight_start":1,"highlight_end":98},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"complete!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":14272,"byte_end":14750,"line_start":433,"line_end":448,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complete (","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i, o)    => $crate::IResult::Done(i, o),","highlight_start":1,"highlight_end":71},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(_) =>  {","highlight_start":1,"highlight_end":45},{"text":"          $crate::IResult::Error(error_position!($crate::ErrorKind::Complete, $i))","highlight_start":1,"highlight_end":83},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    complete!($i, call!($f));","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:601:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m601\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m602\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m603\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m604\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m617\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24595,"byte_end":24596,"line_start":694,"line_end":694,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4520,"byte_end":4544,"line_start":127,"line_end":127,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":18328,"byte_end":18740,"line_start":624,"line_end":641,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    delimited!($i, call!($f), $($rest)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m624\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m625\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m626\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m627\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m640\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26811,"byte_end":26812,"line_start":776,"line_end":776,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":19596,"byte_end":19619,"line_start":532,"line_end":532,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24187,"byte_end":24248,"line_start":683,"line_end":683,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24559,"byte_end":24595,"line_start":694,"line_end":694,"column_start":5,"column_end":41,"is_primary":false,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":5,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4520,"byte_end":4544,"line_start":127,"line_end":127,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":18328,"byte_end":18740,"line_start":624,"line_end":641,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26361,"byte_end":26820,"line_start":765,"line_end":778,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Error(_)      => $crate::IResult::Done($i, ::std::option::Option::None),","highlight_start":1,"highlight_end":98},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m776\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m624\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m625\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m626\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m627\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m640\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26811,"byte_end":26812,"line_start":776,"line_end":776,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16752,"byte_end":16775,"line_start":465,"line_end":465,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24187,"byte_end":24248,"line_start":683,"line_end":683,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":5890,"byte_end":5916,"line_start":174,"line_end":174,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4700,"byte_end":4726,"line_start":131,"line_end":131,"column_start":43,"column_end":69,"is_primary":false,"text":[{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":43,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":18328,"byte_end":18740,"line_start":624,"line_end":641,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26361,"byte_end":26820,"line_start":765,"line_end":778,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Error(_)      => $crate::IResult::Done($i, ::std::option::Option::None),","highlight_start":1,"highlight_end":98},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m776\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m624\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m625\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m626\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m627\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m640\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18686,"byte_end":18687,"line_start":508,"line_end":508,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24187,"byte_end":24248,"line_start":683,"line_end":683,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":5890,"byte_end":5916,"line_start":174,"line_end":174,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4700,"byte_end":4726,"line_start":131,"line_end":131,"column_start":43,"column_end":69,"is_primary":false,"text":[{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":43,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":18328,"byte_end":18740,"line_start":624,"line_end":641,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m624\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m625\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m626\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m627\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m640\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18686,"byte_end":18687,"line_start":508,"line_end":508,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":14363,"byte_end":14386,"line_start":436,"line_end":436,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26446,"byte_end":26469,"line_start":768,"line_end":768,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":19596,"byte_end":19619,"line_start":532,"line_end":532,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":18328,"byte_end":18740,"line_start":624,"line_end":641,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f32)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26361,"byte_end":26820,"line_start":765,"line_end":778,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Error(_)      => $crate::IResult::Done($i, ::std::option::Option::None),","highlight_start":1,"highlight_end":98},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"complete!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":14272,"byte_end":14750,"line_start":433,"line_end":448,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complete (","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i, o)    => $crate::IResult::Done(i, o),","highlight_start":1,"highlight_end":71},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(_) =>  {","highlight_start":1,"highlight_end":45},{"text":"          $crate::IResult::Error(error_position!($crate::ErrorKind::Complete, $i))","highlight_start":1,"highlight_end":83},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    complete!($i, call!($f));","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:624:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m624\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m625\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m626\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m627\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m640\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24595,"byte_end":24596,"line_start":694,"line_end":694,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4520,"byte_end":4544,"line_start":127,"line_end":127,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":18899,"byte_end":19311,"line_start":647,"line_end":664,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    delimited!($i, call!($f), $($rest)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m649\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m650\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m664\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26811,"byte_end":26812,"line_start":776,"line_end":776,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":19596,"byte_end":19619,"line_start":532,"line_end":532,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24187,"byte_end":24248,"line_start":683,"line_end":683,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24559,"byte_end":24595,"line_start":694,"line_end":694,"column_start":5,"column_end":41,"is_primary":false,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":5,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4520,"byte_end":4544,"line_start":127,"line_end":127,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":18899,"byte_end":19311,"line_start":647,"line_end":664,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26361,"byte_end":26820,"line_start":765,"line_end":778,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Error(_)      => $crate::IResult::Done($i, ::std::option::Option::None),","highlight_start":1,"highlight_end":98},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m776\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m649\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m650\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m664\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26811,"byte_end":26812,"line_start":776,"line_end":776,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16752,"byte_end":16775,"line_start":465,"line_end":465,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24187,"byte_end":24248,"line_start":683,"line_end":683,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":5890,"byte_end":5916,"line_start":174,"line_end":174,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4700,"byte_end":4726,"line_start":131,"line_end":131,"column_start":43,"column_end":69,"is_primary":false,"text":[{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":43,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":18899,"byte_end":19311,"line_start":647,"line_end":664,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26361,"byte_end":26820,"line_start":765,"line_end":778,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Error(_)      => $crate::IResult::Done($i, ::std::option::Option::None),","highlight_start":1,"highlight_end":98},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m776\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m649\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m650\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m664\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18686,"byte_end":18687,"line_start":508,"line_end":508,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24187,"byte_end":24248,"line_start":683,"line_end":683,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":5890,"byte_end":5916,"line_start":174,"line_end":174,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4700,"byte_end":4726,"line_start":131,"line_end":131,"column_start":43,"column_end":69,"is_primary":false,"text":[{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":43,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":18899,"byte_end":19311,"line_start":647,"line_end":664,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m649\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m650\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m664\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18686,"byte_end":18687,"line_start":508,"line_end":508,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":14363,"byte_end":14386,"line_start":436,"line_end":436,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26446,"byte_end":26469,"line_start":768,"line_end":768,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":19596,"byte_end":19619,"line_start":532,"line_end":532,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":18899,"byte_end":19311,"line_start":647,"line_end":664,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26361,"byte_end":26820,"line_start":765,"line_end":778,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Error(_)      => $crate::IResult::Done($i, ::std::option::Option::None),","highlight_start":1,"highlight_end":98},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"complete!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":14272,"byte_end":14750,"line_start":433,"line_end":448,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complete (","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i, o)    => $crate::IResult::Done(i, o),","highlight_start":1,"highlight_end":71},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(_) =>  {","highlight_start":1,"highlight_end":45},{"text":"          $crate::IResult::Error(error_position!($crate::ErrorKind::Complete, $i))","highlight_start":1,"highlight_end":83},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    complete!($i, call!($f));","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:647:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m649\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m650\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m664\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24595,"byte_end":24596,"line_start":694,"line_end":694,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4520,"byte_end":4544,"line_start":127,"line_end":127,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":19465,"byte_end":19877,"line_start":670,"line_end":687,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:694:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    delimited!($i, call!($f), $($rest)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m672\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m673\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m686\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m687\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `delimited`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `delimited` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26811,"byte_end":26812,"line_start":776,"line_end":776,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":19596,"byte_end":19619,"line_start":532,"line_end":532,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24187,"byte_end":24248,"line_start":683,"line_end":683,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24559,"byte_end":24595,"line_start":694,"line_end":694,"column_start":5,"column_end":41,"is_primary":false,"text":[{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":5,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4520,"byte_end":4544,"line_start":127,"line_end":127,"column_start":17,"column_end":41,"is_primary":false,"text":[{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":17,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":19465,"byte_end":19877,"line_start":670,"line_end":687,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26361,"byte_end":26820,"line_start":765,"line_end":778,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Error(_)      => $crate::IResult::Done($i, ::std::option::Option::None),","highlight_start":1,"highlight_end":98},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m776\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m672\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m673\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m686\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m687\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26811,"byte_end":26812,"line_start":776,"line_end":776,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    opt!($i, call!($f));","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16752,"byte_end":16775,"line_start":465,"line_end":465,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24187,"byte_end":24248,"line_start":683,"line_end":683,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":5890,"byte_end":5916,"line_start":174,"line_end":174,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4700,"byte_end":4726,"line_start":131,"line_end":131,"column_start":43,"column_end":69,"is_primary":false,"text":[{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":43,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":19465,"byte_end":19877,"line_start":670,"line_end":687,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26361,"byte_end":26820,"line_start":765,"line_end":778,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Error(_)      => $crate::IResult::Done($i, ::std::option::Option::None),","highlight_start":1,"highlight_end":98},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `opt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs:776:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m776\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    opt!($i, call!($f));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m672\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m673\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m686\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m687\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `opt`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `opt` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18686,"byte_end":18687,"line_start":508,"line_end":508,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24187,"byte_end":24248,"line_start":683,"line_end":683,"column_start":13,"column_end":74,"is_primary":false,"text":[{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":13,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":5890,"byte_end":5916,"line_start":174,"line_end":174,"column_start":13,"column_end":39,"is_primary":false,"text":[{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":13,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4700,"byte_end":4726,"line_start":131,"line_end":131,"column_start":43,"column_end":69,"is_primary":false,"text":[{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":43,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":6307,"byte_end":6333,"line_start":190,"line_end":190,"column_start":7,"column_end":33,"is_primary":false,"text":[{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":7,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17709,"byte_end":17732,"line_start":487,"line_end":487,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":19465,"byte_end":19877,"line_start":670,"line_end":687,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"alt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/branch.rs","byte_start":4309,"byte_end":6347,"line_start":120,"line_end":193,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! alt (","highlight_start":1,"highlight_end":19},{"text":"  (__impl $i:expr, $e:ident | $($rest:tt)*) => (","highlight_start":1,"highlight_end":49},{"text":"    alt!(__impl $i, call!($e) | $($rest)*);","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*) | $($rest:tt)*) => (","highlight_start":1,"highlight_end":71},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      let res = $subrule!($i, $($args)*);","highlight_start":1,"highlight_end":42},{"text":"      match res {","highlight_start":1,"highlight_end":18},{"text":"        $crate::IResult::Done(_,_)     => res,","highlight_start":1,"highlight_end":47},{"text":"        $crate::IResult::Incomplete(_) => res,","highlight_start":1,"highlight_end":47},{"text":"        _                              => alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":69},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr } | $($rest:tt)+) => (","highlight_start":1,"highlight_end":89},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":37},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr } | $($rest:tt)*) => (","highlight_start":1,"highlight_end":66},{"text":"    alt!(__impl $i, call!($e) => { $gen } | $($rest)*);","highlight_start":1,"highlight_end":56},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident => { $gen:expr }) => (","highlight_start":1,"highlight_end":51},{"text":"    alt!(__impl $i, call!($e) => { $gen });","highlight_start":1,"highlight_end":44},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)* ) => { $gen:expr }) => (","highlight_start":1,"highlight_end":74},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,$gen(o)),","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $e:ident) => (","highlight_start":1,"highlight_end":34},{"text":"    alt!(__impl $i, call!($e));","highlight_start":1,"highlight_end":32},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr, $subrule:ident!( $($args:tt)*)) => (","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $subrule!( $i, $($args)* ) {","highlight_start":1,"highlight_end":41},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i,o),","highlight_start":1,"highlight_end":70},{"text":"        $crate::IResult::Incomplete(x) => $crate::IResult::Incomplete(x),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Error(_)      => {","highlight_start":1,"highlight_end":44},{"text":"          alt!(__impl $i)","highlight_start":1,"highlight_end":26},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  (__impl $i:expr) => (","highlight_start":1,"highlight_end":24},{"text":"    $crate::IResult::Error(error_position!($crate::ErrorKind::Alt,$i))","highlight_start":1,"highlight_end":71},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      alt!(__impl $i, $($rest)*)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"delimited!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":24082,"byte_end":24604,"line_start":680,"line_end":696,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! delimited(","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $($rest:tt)+) => (","highlight_start":1,"highlight_end":63},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match tuple_parser!($i, 0usize, (), $submac!($($args)*), $($rest)*) {","highlight_start":1,"highlight_end":76},{"text":"        $crate::IResult::Error(a)      => $crate::IResult::Error(a),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i),","highlight_start":1,"highlight_end":74},{"text":"        $crate::IResult::Done(i1, (_, o, _))   => {","highlight_start":1,"highlight_end":52},{"text":"          $crate::IResult::Done(i1, o)","highlight_start":1,"highlight_end":39},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"  ($i:expr, $f:expr, $($rest:tt)+) => (","highlight_start":1,"highlight_end":40},{"text":"    delimited!($i, call!($f), $($rest)*);","highlight_start":1,"highlight_end":42},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m672\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m673\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m686\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m687\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}},{"diagnostic":{"$message_type":"diagnostic","message":"trailing semicolon in macro used in expression position","code":{"code":"semicolon_in_expressions_from_macros","explanation":null},"level":"warning","spans":[{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18686,"byte_end":18687,"line_start":508,"line_end":508,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":14363,"byte_end":14386,"line_start":436,"line_end":436,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26446,"byte_end":26469,"line_start":768,"line_end":768,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":19596,"byte_end":19619,"line_start":532,"line_end":532,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":18362,"byte_end":18535,"line_start":500,"line_end":502,"column_start":11,"column_end":92,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":17405,"byte_end":17564,"line_start":478,"line_end":480,"column_start":11,"column_end":78,"is_primary":false,"text":[{"text":"          tuple_parser!(i,","highlight_start":11,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16342,"byte_end":16382,"line_start":451,"line_end":451,"column_start":7,"column_end":47,"is_primary":false,"text":[{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":7,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36878,"byte_end":36901,"line_start":1117,"line_end":1117,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6630,"byte_end":6653,"line_start":186,"line_end":186,"column_start":13,"column_end":36,"is_primary":false,"text":[{"text":"      match $submac!($i, $($args)*) {","highlight_start":13,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs","byte_start":19465,"byte_end":19877,"line_start":670,"line_end":687,"column_start":3,"column_end":4,"is_primary":false,"text":[{"text":"  flat_map!(input,","highlight_start":3,"highlight_end":19},{"text":"    recognize!(","highlight_start":1,"highlight_end":16},{"text":"      tuple!(","highlight_start":1,"highlight_end":14},{"text":"        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":43},{"text":"        alt!(","highlight_start":1,"highlight_end":14},{"text":"          delimited!(digit, tag!(\".\"), opt!(digit))","highlight_start":1,"highlight_end":52},{"text":"          | delimited!(opt!(digit), tag!(\".\"), digit)","highlight_start":1,"highlight_end":54},{"text":"        ),","highlight_start":1,"highlight_end":11},{"text":"        opt!(complete!(tuple!(","highlight_start":1,"highlight_end":31},{"text":"          alt!(tag!(\"e\") | tag!(\"E\")),","highlight_start":1,"highlight_end":39},{"text":"          opt!(alt!(tag!(\"+\") | tag!(\"-\"))),","highlight_start":1,"highlight_end":45},{"text":"          digit","highlight_start":1,"highlight_end":16},{"text":"          )","highlight_start":1,"highlight_end":12},{"text":"        ))","highlight_start":1,"highlight_end":11},{"text":"      )","highlight_start":1,"highlight_end":8},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    parse_to!(f64)","highlight_start":1,"highlight_end":19},{"text":"  )","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"flat_map!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/verbose_errors.rs","byte_start":6506,"byte_end":8139,"line_start":183,"line_end":215,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! flat_map(","highlight_start":1,"highlight_end":23},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $submac2:ident!( $($args2:tt)* )) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":91},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => $crate::IResult::Incomplete($crate::Needed::Size(i)),","highlight_start":1,"highlight_end":118},{"text":"        $crate::IResult::Done(i, o)                          => match $submac2!(o, $($args2)*) {","highlight_start":1,"highlight_end":97},{"text":"          $crate::IResult::Error(e)                                 => {","highlight_start":1,"highlight_end":73},{"text":"            let err = match e {","highlight_start":1,"highlight_end":32},{"text":"              $crate::Err::Code(k) | $crate::Err::Node(k, _) | $crate::Err::Position(k, _) | $crate::Err::NodePosition(k, _, _) => {","highlight_start":1,"highlight_end":133},{"text":"                $crate::Err::Position(k, $i)","highlight_start":1,"highlight_end":45},{"text":"              }","highlight_start":1,"highlight_end":16},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            $crate::IResult::Error(err)","highlight_start":1,"highlight_end":40},{"text":"          },","highlight_start":1,"highlight_end":13},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown)      => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":125},{"text":"          $crate::IResult::Incomplete($crate::Needed::Size(ref i2)) => $crate::IResult::Incomplete($crate::Needed::Size(*i2)),","highlight_start":1,"highlight_end":127},{"text":"          $crate::IResult::Done(_, o2)                              => $crate::IResult::Done(i, o2)","highlight_start":1,"highlight_end":100},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* ), $g:expr) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, $submac!($($args)*), call!($g));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $g:expr) => (","highlight_start":1,"highlight_end":35},{"text":"    flat_map!($i, call!($f), call!($g));","highlight_start":1,"highlight_end":41},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":58},{"text":"    flat_map!($i, call!($f), $submac!($($args)*));","highlight_start":1,"highlight_end":51},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"recognize!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":36735,"byte_end":37277,"line_start":1112,"line_end":1130,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! recognize (","highlight_start":1,"highlight_end":25},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      use $crate::Offset;","highlight_start":1,"highlight_end":26},{"text":"      use $crate::Slice;","highlight_start":1,"highlight_end":25},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,_)     => {","highlight_start":1,"highlight_end":44},{"text":"          let index = ($i).offset(i);","highlight_start":1,"highlight_end":38},{"text":"          $crate::IResult::Done(i, ($i).slice(..index))","highlight_start":1,"highlight_end":56},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    recognize!($i, call!($f))","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"opt!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":26361,"byte_end":26820,"line_start":765,"line_end":778,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! opt(","highlight_start":1,"highlight_end":18},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i,o)     => $crate::IResult::Done(i, ::std::option::Option::Some(o)),","highlight_start":1,"highlight_end":100},{"text":"        $crate::IResult::Error(_)      => $crate::IResult::Done($i, ::std::option::Option::None),","highlight_start":1,"highlight_end":98},{"text":"        $crate::IResult::Incomplete(i) => $crate::IResult::Incomplete(i)","highlight_start":1,"highlight_end":73},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    opt!($i, call!($f));","highlight_start":1,"highlight_end":25},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"complete!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/macros.rs","byte_start":14272,"byte_end":14750,"line_start":433,"line_end":448,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complete (","highlight_start":1,"highlight_end":24},{"text":"  ($i:expr, $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":49},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Done(i, o)    => $crate::IResult::Done(i, o),","highlight_start":1,"highlight_end":71},{"text":"        $crate::IResult::Error(e)      => $crate::IResult::Error(e),","highlight_start":1,"highlight_end":69},{"text":"        $crate::IResult::Incomplete(_) =>  {","highlight_start":1,"highlight_end":45},{"text":"          $crate::IResult::Error(error_position!($crate::ErrorKind::Complete, $i))","highlight_start":1,"highlight_end":83},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $f:expr) => (","highlight_start":1,"highlight_end":26},{"text":"    complete!($i, call!($f));","highlight_start":1,"highlight_end":30},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16278,"byte_end":16396,"line_start":448,"line_end":454,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple (","highlight_start":1,"highlight_end":21},{"text":"  ($i:expr, $($rest:tt)*) => (","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      tuple_parser!($i, 0usize, (), $($rest)*)","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"tuple_parser!","def_site_span":{"file_name":"/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs","byte_start":16470,"byte_end":20444,"line_start":459,"line_end":555,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! tuple_parser (","highlight_start":1,"highlight_end":28},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident, $($rest:tt)*) => (","highlight_start":1,"highlight_end":76},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e), $($rest)*);","highlight_start":1,"highlight_end":72},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":83},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), (o), $($rest)*)","highlight_start":1,"highlight_end":78},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt)*), $submac:ident!( $($args:tt)* ), $($rest:tt)*) => (","highlight_start":1,"highlight_end":97},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          tuple_parser!(i,","highlight_start":1,"highlight_end":27},{"text":"            $consumed + ($crate::InputLength::input_len(&($i)) -","highlight_start":1,"highlight_end":65},{"text":"                         $crate::InputLength::input_len(&i)), ($($parsed)* , o), $($rest)*)","highlight_start":1,"highlight_end":92},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:tt),*), $e:ident) => (","highlight_start":1,"highlight_end":62},{"text":"    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));","highlight_start":1,"highlight_end":61},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, (), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":69},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, (o))","highlight_start":1,"highlight_end":40},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*), $submac:ident!( $($args:tt)* )) => (","highlight_start":1,"highlight_end":86},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      match $submac!($i, $($args)*) {","highlight_start":1,"highlight_end":38},{"text":"        $crate::IResult::Error(e)                            =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Error(e),","highlight_start":1,"highlight_end":37},{"text":"        $crate::IResult::Incomplete($crate::Needed::Unknown) =>","highlight_start":1,"highlight_end":64},{"text":"          $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":64},{"text":"        $crate::IResult::Incomplete($crate::Needed::Size(i)) => {","highlight_start":1,"highlight_end":66},{"text":"          let (needed,overflowed) = $consumed.overflowing_add(i);","highlight_start":1,"highlight_end":66},{"text":"          match overflowed {","highlight_start":1,"highlight_end":29},{"text":"              true  => $crate::IResult::Incomplete($crate::Needed::Unknown),","highlight_start":1,"highlight_end":77},{"text":"              false =>  $crate::IResult::Incomplete($crate::Needed::Size(needed)),","highlight_start":1,"highlight_end":83},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        $crate::IResult::Done(i,o)     => {","highlight_start":1,"highlight_end":44},{"text":"          $crate::IResult::Done(i, ($($parsed),* , o))","highlight_start":1,"highlight_end":55},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"      }","highlight_start":1,"highlight_end":8},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":"  ($i:expr, $consumed:expr, ($($parsed:expr),*)) => (","highlight_start":1,"highlight_end":54},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"      $crate::IResult::Done($i, ($($parsed),*))","highlight_start":1,"highlight_end":48},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"  );","highlight_start":1,"highlight_end":5},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"macro invocations at the end of a block are treated as expressions","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trailing semicolon in macro used in expression position\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/sequence.rs:508:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m508\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    tuple_parser!($i, $consumed, ($($parsed),*), call!($e));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/hofst/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/nom-2.2.1/src/nom.rs:670:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m  flat_map!(input,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    recognize!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m672\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m      tuple!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m673\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        opt!(alt!(tag!(\"+\") | tag!(\"-\"))),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m686\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    parse_to!(f64)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m687\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m  )\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: macro invocations at the end of a block are treated as expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: to ignore the value produced by the macro, add a semicolon after the invocation of `tuple_parser`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `tuple_parser` which comes from the expansion of the macro `flat_map` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}}]}
